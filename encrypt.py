from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes



KEY_FILE = "filekey.key" 
file_pathx = "test.txt"
key = get_random_bytes(16) 
def save_key(key, key_file):
    with open(key_file, "wb") as f:
        f.write(key)
    print(f"Key has been saved to '{key_file}'.")


def encrypt_file(file_path):
    cipher = AES.new(key, AES.MODE_EAX)
    with open(file_path, "rb") as f:
        plaintext = f.read()  # Read the entire file as bytes
    try:
        ciphertext, tag = cipher.encrypt_and_digest(plaintext)  # Encrypt and generate tag

        # Overwrite the original file with nonce, tag, and ciphertext
        with open(file_path, "wb") as f:
            f.write(cipher.nonce)      # 16 bytes
            f.write(tag)               # 16 bytes
            f.write(ciphertext)        # Encrypted data

        print(f"File '{file_path}' has been encrypted and replaced.")
    except ValueError:
        print(f"Encryption failed for file '{file_path}'.")

save_key(key, KEY_FILE)
if __name__ == "__main__":
    encrypt_file(file_pathx, key)
