from Crypto.Cipher import AES

KEY_FILE = "filekey.key"  # File to save the encryption key

file_path = "test.txt"
# Function to save the key to a file


# Function to load the key from a file
def load_key(key_file):
    with open(key_file, "rb") as f:
        key = f.read()
    print(f"Key has been loaded from '{key_file}'.")
    return key

# Function to encrypt and replace the file

key = load_key(KEY_FILE)

# Function to decrypt and restore the file
def decrypt_file(file_path):
 
    with open(file_path, "rb") as f:
        nonce = f.read(16)         # Read nonce (first 16 bytes)
        tag = f.read(16)           # Read tag (next 16 bytes)
        ciphertext = f.read()  
   
            # Remaining is the ciphertext
    try:
        cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
        plaintext = cipher.decrypt_and_verify(ciphertext, tag)  # Decrypt and verify

        # Overwrite the file with the decrypted content
        
        with open(file_path, "wb") as f:
            f.write(plaintext)

        print(f"File '{file_path}' has been decrypted and restored.")
    except ValueError:
        print(f"Decryption failed for file '{file_path}'.")


# Example Usage
if __name__ == "__main__":
    decrypt_file(file_path)
# Generate a key and save it to a file
 # 128-bit key


# Encrypt and replace the original file

# Decrypt and restore the original file

# Load the key from the file for decryption

